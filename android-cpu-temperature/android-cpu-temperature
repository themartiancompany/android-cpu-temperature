#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

_requirements() {
  local \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == 'Android' ]]; then
    _check_cmd \
      "activity-launch" \
      "android-utils"
    _check_cmd \
      "activity-focused" \
      "android-utils"
  fi
}

# shellcheck disable=SC2034
_global_variables() {
  view_date=""
  color=""
  quiet=""
}

_android_cpu_temperature() {
  local \
    _temperature \
    _temperature_files=() \
    _conf
  _conf="$( \
    _get_conf_path)"
  _temperature_files=(
    "/sys/devices/system/cpu/cpu0/cpufreq/cpu_temp"             
    "/sys/devices/system/cpu/cpu0/cpufreq/FakeShmoo_cpu_temp"    
    "/sys/class/thermal/thermal_zone1/temp"                      
    "/sys/class/i2c-adapter/i2c-4/4-004c/temperature"            
    "/sys/devices/platform/tegra-i2c.3/i2c-4/4-004c/temperature" 
    "/sys/devices/platform/omap/omap_temp_sensor.0/temperature"  
    "/sys/devices/platform/tegra_tmon/temp1_input"               
    "/sys/kernel/debug/tegra_thermal/temp_tj"                   
    "/sys/devices/platform/s5p-tmu/temperature"                  
    "/sys/class/thermal/thermal_zone0/temp"                      
    "/sys/devices/virtual/thermal/thermal_zone0/temp"            
    "/sys/class/hwmon/hwmon0/device/temp1_input"                 
    "/sys/devices/virtual/thermal/thermal_zone1/temp"            
    "/sys/devices/platform/s5p-tmu/curr_temp")
  for _file \
    in "${_temperature_files[@]}"; do
    _temperature="$( \
      su -c \
        "cat ${_file} 2&>/dev/null" || \
      true)"
    if [[ "${_temperature}" != "" ]]; then
      echo \
        "${_temperature}"
      break
    fi
  done
}

_get_conf_path() {
  local \
    _dir \
    _conf
  _dir="${HOME}/.config/android-cpu-temperature"
  _conf="${_dir}/$( \
    _get \
      "app" \
      "name").cfg"
  echo \
    "${_conf}"
}

_set_overrides() {
  _set_override \
    "view" \
    "date" \
    "$(_get_date_human)"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                View date:   $(_get "view" "date")"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Returns Android CPU temperature.

Usage:
  $(_get "app" "name")
    [options]
  options:
     -c                   Enable color.
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'cvh?' \
    arg; do
  case \
    "${arg}" in
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
_set_overrides
_config_user_init \
  "$(_get 'app' 'name')"
app_opts=(
)
_show_config
_android_cpu_temperature \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
